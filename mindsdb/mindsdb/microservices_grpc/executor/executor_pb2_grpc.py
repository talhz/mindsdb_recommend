# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mindsdb.microservices_grpc.executor.executor_pb2 as executor__pb2


class ExecutorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StatementPrepare = channel.unary_unary(
                '/ExecutorService/StatementPrepare',
                request_serializer=executor__pb2.ExecutionContext.SerializeToString,
                response_deserializer=executor__pb2.ExecutorResponse.FromString,
                )
        self.StatementExecute = channel.unary_unary(
                '/ExecutorService/StatementExecute',
                request_serializer=executor__pb2.StatementExecuteContext.SerializeToString,
                response_deserializer=executor__pb2.ExecutorResponse.FromString,
                )
        self.QueryExecute = channel.unary_unary(
                '/ExecutorService/QueryExecute',
                request_serializer=executor__pb2.ExecutionContext.SerializeToString,
                response_deserializer=executor__pb2.ExecutorResponse.FromString,
                )
        self.BinaryQueryExecute = channel.unary_unary(
                '/ExecutorService/BinaryQueryExecute',
                request_serializer=executor__pb2.BinaryExecutionContext.SerializeToString,
                response_deserializer=executor__pb2.ExecutorResponse.FromString,
                )
        self.ExecuteExternal = channel.unary_unary(
                '/ExecutorService/ExecuteExternal',
                request_serializer=executor__pb2.ExecutionContext.SerializeToString,
                response_deserializer=executor__pb2.ExecutorResponse.FromString,
                )
        self.Parse = channel.unary_unary(
                '/ExecutorService/Parse',
                request_serializer=executor__pb2.ExecutionContext.SerializeToString,
                response_deserializer=executor__pb2.ExecutorResponse.FromString,
                )
        self.DoExecute = channel.unary_unary(
                '/ExecutorService/DoExecute',
                request_serializer=executor__pb2.ExecutorContext.SerializeToString,
                response_deserializer=executor__pb2.ExecutorResponse.FromString,
                )
        self.ChangeDefaultDB = channel.unary_unary(
                '/ExecutorService/ChangeDefaultDB',
                request_serializer=executor__pb2.DefaultDBContext.SerializeToString,
                response_deserializer=executor__pb2.ExecutorResponse.FromString,
                )
        self.DeleteExecutor = channel.unary_unary(
                '/ExecutorService/DeleteExecutor',
                request_serializer=executor__pb2.ExecutorContext.SerializeToString,
                response_deserializer=executor__pb2.ExecutorStatusResponse.FromString,
                )


class ExecutorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StatementPrepare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StatementExecute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryExecute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BinaryQueryExecute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteExternal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Parse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DoExecute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeDefaultDB(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteExecutor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExecutorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StatementPrepare': grpc.unary_unary_rpc_method_handler(
                    servicer.StatementPrepare,
                    request_deserializer=executor__pb2.ExecutionContext.FromString,
                    response_serializer=executor__pb2.ExecutorResponse.SerializeToString,
            ),
            'StatementExecute': grpc.unary_unary_rpc_method_handler(
                    servicer.StatementExecute,
                    request_deserializer=executor__pb2.StatementExecuteContext.FromString,
                    response_serializer=executor__pb2.ExecutorResponse.SerializeToString,
            ),
            'QueryExecute': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryExecute,
                    request_deserializer=executor__pb2.ExecutionContext.FromString,
                    response_serializer=executor__pb2.ExecutorResponse.SerializeToString,
            ),
            'BinaryQueryExecute': grpc.unary_unary_rpc_method_handler(
                    servicer.BinaryQueryExecute,
                    request_deserializer=executor__pb2.BinaryExecutionContext.FromString,
                    response_serializer=executor__pb2.ExecutorResponse.SerializeToString,
            ),
            'ExecuteExternal': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteExternal,
                    request_deserializer=executor__pb2.ExecutionContext.FromString,
                    response_serializer=executor__pb2.ExecutorResponse.SerializeToString,
            ),
            'Parse': grpc.unary_unary_rpc_method_handler(
                    servicer.Parse,
                    request_deserializer=executor__pb2.ExecutionContext.FromString,
                    response_serializer=executor__pb2.ExecutorResponse.SerializeToString,
            ),
            'DoExecute': grpc.unary_unary_rpc_method_handler(
                    servicer.DoExecute,
                    request_deserializer=executor__pb2.ExecutorContext.FromString,
                    response_serializer=executor__pb2.ExecutorResponse.SerializeToString,
            ),
            'ChangeDefaultDB': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeDefaultDB,
                    request_deserializer=executor__pb2.DefaultDBContext.FromString,
                    response_serializer=executor__pb2.ExecutorResponse.SerializeToString,
            ),
            'DeleteExecutor': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteExecutor,
                    request_deserializer=executor__pb2.ExecutorContext.FromString,
                    response_serializer=executor__pb2.ExecutorStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ExecutorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExecutorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StatementPrepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExecutorService/StatementPrepare',
            executor__pb2.ExecutionContext.SerializeToString,
            executor__pb2.ExecutorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StatementExecute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExecutorService/StatementExecute',
            executor__pb2.StatementExecuteContext.SerializeToString,
            executor__pb2.ExecutorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryExecute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExecutorService/QueryExecute',
            executor__pb2.ExecutionContext.SerializeToString,
            executor__pb2.ExecutorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BinaryQueryExecute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExecutorService/BinaryQueryExecute',
            executor__pb2.BinaryExecutionContext.SerializeToString,
            executor__pb2.ExecutorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteExternal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExecutorService/ExecuteExternal',
            executor__pb2.ExecutionContext.SerializeToString,
            executor__pb2.ExecutorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Parse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExecutorService/Parse',
            executor__pb2.ExecutionContext.SerializeToString,
            executor__pb2.ExecutorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DoExecute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExecutorService/DoExecute',
            executor__pb2.ExecutorContext.SerializeToString,
            executor__pb2.ExecutorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangeDefaultDB(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExecutorService/ChangeDefaultDB',
            executor__pb2.DefaultDBContext.SerializeToString,
            executor__pb2.ExecutorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteExecutor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExecutorService/DeleteExecutor',
            executor__pb2.ExecutorContext.SerializeToString,
            executor__pb2.ExecutorStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
